<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:madcap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" madcap:lastblockdepth="2" madcap:lastheight="135.6667" madcap:lastwidth="592" madcap:disablemasterstylesheet="true" madcap:tocpath="Programming" madcap:medium="non-print" madcap:inpreviewmode="false" madcap:preloadimages="false" madcap:runtimefiletype="Topic" madcap:targettype="WebHelp" lang="en-us" xml:lang="en-us" madcap:pathtohelpsystem="../../" madcap:helpsystemfilename="ENVIHelp.xml" madcap:searchtype="Stem">
 <!-- saved from url=(0014)about:internet -->
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>
   Manage Errors
  </title>
  <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
  <link href="../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
  <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
  </script>
 </head>
 <body>
  <p class="MCWebHelpFramesetLink" style="display: none;">
   <a href="../../ENVIHelp_CSH.htm#ExtendCustomize/ErrorHandling.htm" style="">
    Open topic with navigation
   </a>
  </p>
  <div class="MCBreadcrumbsBox_0">
   <span class="MCBreadcrumbsPrefix">
    <![CDATA[ ]]>
   </span>
   <a class="MCBreadcrumbsLink" href="ProgrammingWithENVI.htm">
    Programming
   </a>
   <span class="MCBreadcrumbsDivider">
    &gt;
   </span>
   <span class="MCBreadcrumbs">
    Manage Errors
   </span>
  </div>
  <h1>
   Manage Errors
   <a name="kanchor471">
   </a>
  </h1>
  <p>
   When writing programs to customize
   <span class="DocumentTitleProductName">
    ENVI
   </span>
   or to perform an automated task, you should add some error-handling code to catch potential errors.
  </p>
  <p>
   See the following sections for some guidelines and best practices for different types of programs:
  </p>
  <ul>
   <li value="1">
    <a href="#Batch">
     Batch Programs
    </a>
   </li>
   <li value="2">
    <a href="#Toolbox">
     Toolbox Extensions
    </a>
   </li>
  </ul>
  <h2>
   <a name="Batch">
   </a>
   Batch Programs
  </h2>
  <p>
   <a href="BatchPrograms.htm">
    Batch programs
   </a>
   are used primarily to process data without any user interface or user interaction. To manage errors, you can either use the ERROR keyword or insert a CATCH block as described in the following sections.
  </p>
  <h3>
   <a name="Use">
   </a>
   Use the ERROR Keyword
  </h3>
  <p>
   The
   <a href="ENVI.htm">
    ENVI routine
   </a>
   and most methods have an ERROR keyword that catches errors in your code. Whenever you issue a command where an error could occur, set ERROR to a named variable that will contain the system error message. If no error occurs, the ERROR variable will be set to a null string (
   <code>
    ''
   </code>
   ).
  </p>
  <p>
   The following code shows an error scenario where
   <a href="ENVI__OpenRaster.htm">
    ENVI::OpenRaster
   </a>
   method is invoked with a filename that does not actually exist.
  </p>
  <ol>
   <li value="1">
    Copy and paste this code into a new IDL Editor window and save it as
    <code>
     mybatch1.pro
    </code>
    :
   </li>
   <p class="Code">
    PRO MYBATCH1
   </p>
   <p class="Code">
    COMPILE_OPT IDL2
   </p>
   <p class="Code_Indented">
    ; Launch the application with a log file
   </p>
   <p class="Code_Indented">
    e = ENVI(/HEADLESS)
   </p>
   <p class="Code_Indented">
    e.LOG_FILE = e.GetTemporaryFilename()
   </p>
   <p class="Code_Indented">
    &#160;
   </p>
   <p class="Code_Indented">
    ; Open the file
   </p>
   <p class="Code_Indented">
    file = 'doesnotexist.dat'
   </p>
   <p class="Code_Indented">
    raster = e.OpenRaster(file,ERROR=err)
   </p>
   <p class="Code_Indented">
    &#160;
   </p>
   <p class="Code_Indented">
    ; Check error state
   </p>
   <p class="Code_Indented">
    IF err THEN BEGIN
   </p>
   <p class="Code_Indented">
    &#160;&#160;PRINT,err
   </p>
   <p class="Code_Indented">
    &#160;&#160;e.Close
   </p>
   <p class="Code_Indented">
    &#160;&#160;RETURN
   </p>
   <p class="Code_Indented">
    ENDIF
   </p>
   <p class="Code">
    END
   </p>
   <li value="2">
    Compile and run
    <code>
     mybatch1.pro
    </code>
    . The IDL console will report "File does not exist."
   </li>
  </ol>
  <p>
   If you do not set the ERROR keyword on all commands that may fail, and an error occurs, the program stops on the offending line and halts execution. The IDL system variable !ERROR_STATE updates with the latest error message. The following code shows an example of opening a file without the required filename (and the ERROR keyword wasn't specified). Copy and paste this into the IDL command line:
  </p>
  <p class="Code">
   ; Launch the application and set the ERROR keyword
  </p>
  <p class="Code">
   e = ENVI()
  </p>
  <p class="Code">
   &#160;
  </p>
  <p class="Code">
   ; Open the file
  </p>
  <p class="Code">
   file = FILEPATH('qb_boulder_msi', ROOT_DIR=e.ROOT_DIR, $
  </p>
  <p class="Code_Indented">
   SUBDIRECTORY = ['data'])
  </p>
  <p class="Code">
   raster = e.OpenRaster()
  </p>
  <p>
   You can view the contents of !ERROR_STATE from the System field of the Variable Watch Window, as follows:
  </p>
  <p>
   <img src="../Resources/Images/ProgramInterface/errmsg_field.gif" />
  </p>
  <p>
   Or, type the following at the IDL command line:
  </p>
  <p class="Code">
   PRINT, !ERROR_STATE.MSG
  </p>
  <p>
   Result:
  </p>
  <p class="Code">
   Required arguments are missing.
  </p>
  <p>
   See IDL Help for more information on !ERROR_STATE.
  </p>
  <h3>
   <a name="Insert">
   </a>
   Insert a CATCH Block
  </h3>
  <p>
   Rather than letting the ERROR keyword manage errors, you can manage any errors yourself by inserting a block of code in your script that contains the IDL CATCH routine. CATCH is a generic error handler that prevents program execution from halting when an unexpected error condition occurs, and it sends the error message to the IDL&#160;system variable !ERROR_STATE. The error handling code typically uses an IF statement, which requires you to add PRO and END statements and compile the program (versus copying and pasting the code into the IDL command line).
  </p>
  <ol>
   <li value="1">
    Copy and paste the following example code into a new IDL Editor window and save it as
    <code>
     mybatch2.pro
    </code>
    :
   </li>
   <p class="Code">
    PRO MYBATCH2
   </p>
   <p class="Code_Indented">
    COMPILE_OPT IDL2
   </p>
   <p class="Code_Indented">
    &#160;
   </p>
   <p class="Code_Indented">
    ; General error handler
   </p>
   <p class="Code_Indented">
    CATCH,err
   </p>
   <p class="Code_Indented">
    &#160;
   </p>
   <p class="Code_Indented">
    IF err NE 0 THEN BEGIN
   </p>
   <p class="Code_Indented">
    &#160;&#160;CATCH, /CANCEL
   </p>
   <p class="Code_Indented">
    &#160;&#160;IF OBJ_VALID(e) THEN $
   </p>
   <p class="Code_Indented">
    &#160;&#160;&#160;&#160;e.ReportError,'ERROR: ' + !error_state.msg
   </p>
   <p class="Code_Indented">
    &#160;&#160;MESSAGE,/RESET
   </p>
   <p class="Code_Indented">
    &#160;&#160;RETURN
   </p>
   <p class="Code_Indented">
    ENDIF
   </p>
   <p class="Code_Indented">
    &#160;
   </p>
   <p class="Code_Indented">
    ; Launch the application with a log file
   </p>
   <p class="Code_Indented">
    e = ENVI()
   </p>
   <p class="Code_Indented">
    e.LOG_FILE = e.GetTemporaryFilename()
   </p>
   <p class="Code_Indented">
    &#160;
   </p>
   <p class="Code_Indented">
    ; Open the file
   </p>
   <p class="Code_Indented">
    file = 'doesnotexist.dat'
   </p>
   <p class="Code_Indented">
    raster = e.OpenRaster(file)
   </p>
   <p class="Code">
    END
   </p>
   <li value="2">
    Compile and run
    <code>
     mybatch2.pro
    </code>
    .
   </li>
  </ol>
  <p>
   When an error occurs, the script jumps to the line of code where the CATCH routine was called and continues executing from there. At this point, you can use the information in the !ERROR_STATE variable to figure out what caused the error. In this example, the following error message displays:
  </p>
  <p>
   <img src="../Resources/Images/ProgramInterface/error_mybatch2.gif" />
  </p>
  <h3>
   Log Files
   <a name="kanchor472">
   </a>
  </h3>
  <p>
   Log files are used primarily in
   <a href="BatchPrograms.htm">
    batch programs
   </a>
   to summarize processing results, to report the status of key processing events, and to list any errors issued when running
   <span class="DocumentTitleProductName">
    ENVI
   </span>
   routines.
  </p>
  <p>
   Use the LOG_FILE property in the
   <a href="ENVI.htm">
    ENVI routine
   </a>
   to specify a full path and filename for a log file. To disable error logging, you can choose to not set LOG_FILE at all, or set it to a null string (
   <code>
    ''
   </code>
   ). Each time you set LOG_FILE, a new log file is started, overwriting any existing files with the same name.
  </p>
  <p>
   The log file that
   <span class="DocumentTitleProductName">
    ENVI
   </span>
   creates will contain the date and time of processing events, your system specifications, and any errors that were encountered. Use the
   <a href="ENVI__LogMessage.htm">
    ENVI::LogMessage
   </a>
   method to write a custom message to this log file if needed. You can insert the LogMessage method multiple times in your code, for example, to indicate successful completion of a process so that you can review the log file later.
  </p>
  <h2>
   <a name="Toolbox">
   </a>
   Toolbox Extensions
  </h2>
  <p>
   When writing
   <a href="write_deploy_toolbox_extensions.htm">
    toolbox extensions
   </a>
   , you can use the ERROR keyword or insert a CATCH&#160;block in the same manner as writing batch programs, but rather than displaying IDL's default error messages (contained in the !ERROR_STATE variable), you can write your own custom error message using the
   <a href="ENVI__ReportError.htm">
    ENVI::ReportError
   </a>
   method. To issue information or warning dialogs instead of error messages, set the INFORMATION or WARNING keywords, respectively. See
   <a href="write_deploy_toolbox_extensions.htm">
    Write and Deploy Toolbox Extensions
   </a>
   for example code that uses the ReportError method.
  </p>
  <p>
   The following is a simple example that checks for a valid input file.
  </p>
  <p class="Code">
   ; Start the application
  </p>
  <p class="Code">
   e = ENVI()
  </p>
  <p class="Code">
   raster = e.OpenRaster(doesnotexist, ERROR=error)
  </p>
  <p class="Code">
   IF error THEN e.ReportError, 'Please provide a valid file', /INFORMATION
  </p>
  <p>
   If the
   <b>
    <a href="../Preferences.htm#EnableSystemLogging">
     Enable System Logging
    </a>
   </b>
   preference is set to
   <b>
    True
   </b>
   , error messages are also written to the system log file (located in your system's temporary directory by default).
  </p>
  <div class="mp_footer">
   Copyright ©
   <span class="DocumentTitleCopyrightYear">
    2012
   </span>
   <![CDATA[ ]]>
   <span class="DocumentTitleCopyrightCompanyName">
    Exelis Visual Information Solutions, Inc.
   </span>
   All Rights Reserved.
  </div>
  <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
  </script>
 </body>
</html>