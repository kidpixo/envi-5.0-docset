<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:madcap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" madcap:lastblockdepth="2" madcap:lastheight="135.6667" madcap:lastwidth="592" madcap:disablemasterstylesheet="true" madcap:tocpath="Programming|Routines|Processing" madcap:medium="non-print" madcap:inpreviewmode="false" madcap:preloadimages="false" madcap:runtimefiletype="Topic" madcap:targettype="WebHelp" lang="en-us" xml:lang="en-us" madcap:pathtohelpsystem="../../../../" madcap:helpsystemfilename="ENVIHelp.xml" madcap:searchtype="Stem">
 <!-- saved from url=(0014)about:internet -->
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>
   TOPO_FEATURE_DOIT
  </title>
  <link href="../../../SkinSupport/MadCap.css" rel="stylesheet" />
  <link href="../../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
  <script src="../../../SkinSupport/MadCapAll.js" type="text/javascript">
  </script>
 </head>
 <body>
  <p class="MCWebHelpFramesetLink" style="display: none;">
   <a href="../../../../ENVIHelp_CSH.htm#ExtendCustomize/ENVIClassicAPI/T/TOPO_FEATURE_DOIT.htm" style="">
    Open topic with navigation
   </a>
  </p>
  <div class="MCBreadcrumbsBox_0">
   <span class="MCBreadcrumbsPrefix">
    <![CDATA[ ]]>
   </span>
   <a class="MCBreadcrumbsLink" href="../../ProgrammingWithENVI.htm">
    Programming
   </a>
   <span class="MCBreadcrumbsDivider">
    &gt;
   </span>
   <a class="MCBreadcrumbsLink" href="../../Routines.htm">
    Routines
   </a>
   <span class="MCBreadcrumbsDivider">
    &gt;
   </span>
   <a class="MCBreadcrumbsLink" href="../A/ADAPT_FILT_DOIT.htm">
    Processing
   </a>
   <span class="MCBreadcrumbsDivider">
    &gt;
   </span>
   <span class="MCBreadcrumbs">
    TOPO_FEATURE_DOIT
   </span>
  </div>
  <h1>
   <a name="kanchor785">
   </a>
   TOPO_FEATURE_DOIT
  </h1>
  <p>
   Use this procedure to create a topographic feature classification image. Each pixel is classified into one of the following terrain types or morphometric features by setting the keyword CPTR: peak, ridge, pass, plane, channel, or pit.
  </p>
  <h2 class="API">
   <a name="Syntax">
   </a>
   Syntax
  </h2>
  <p>
   ENVI_DOIT, 'TOPO_FEATURE_DOIT',
   <a href="#CLASS_NAMES">
    CLASS_NAMES
   </a>
   =
   <i>
    array
   </i>
   ,
   <a href="#CONVEX_TOL">
    CONVEX_TOL
   </a>
   =
   <i>
    value
   </i>
   ,
   <a href="#CPTR">
    CPTR
   </a>
   ={0 | 1 | 2 | 3 | 4 | 5},
   <a href="#DIMS">
    DIMS
   </a>
   =
   <i>
    array
   </i>
   ,
   <a href="#FID">
    FID
   </a>
   =
   <i>
    file ID
   </i>
   , /
   <a href="#IN_MEMORY">
    IN_MEMORY
   </a>
   ,
   <a href="#KERNEL_SIZE">
    KERNEL_SIZE
   </a>
   =
   <i>
    single scalar
   </i>
   ,
   <a href="#LOOKUP">
    LOOKUP
   </a>
   =
   <i>
    array
   </i>
   ,
   <a href="#OUT_BNAME">
    OUT_BNAME
   </a>
   =
   <i>
    string array
   </i>
   ,
   <a href="#OUT_NAME">
    OUT_NAME
   </a>
   =
   <i>
    string
   </i>
   [,
   <a href="#PIXEL_SIZE">
    PIXEL_SIZE
   </a>
   =
   <i>
    array
   </i>
   ],
   <a href="#POS">
    POS
   </a>
   =
   <i>
    array
   </i>
   ,
   <a href="#R_FID">
    R_FID
   </a>
   =
   <i>
    variable
   </i>
   ,
   <a href="#SLOPE_TOL">
    SLOPE_TOL
   </a>
   =
   <i>
    value
   </i>
  </p>
  <h2 class="API">
   <a name="Keywords">
   </a>
   Keywords
  </h2>
  <h3>
   <a name="CLASS_NAMES">
   </a>
   CLASS_NAMES
  </h3>
  <p>
   Use this keyword to specify names for each output class. CLASS_NAMES is an array of strings with [
   <i>
    num_classes
   </i>
   +1] elements. The first element (Class 0) is “Unclassified.”
  </p>
  <h3>
   <a name="CONVEX_TOL">
   </a>
   CONVEX_TOL
  </h3>
  <p>
   Use this keyword to specify the floating-point or double-precision value for the curvature tolerance. CONVEX_TOL and SLOPE_TOL, in addition to the topographic modeling values, determine how a pixel is classified.
  </p>
  <h3>
   <a name="CPTR">
   </a>
   CPTR
  </h3>
  <p>
   Use this keyword to specify an array of long integers representing the type of output class to compute.
  </p>
  <ul>
   <li value="1">
    0: Peak
   </li>
   <li value="2">
    1: Ridge
   </li>
   <li value="3">
    2: Pass
   </li>
   <li value="4">
    3: Plane
   </li>
   <li value="5">
    4: Channel
   </li>
   <li value="6">
    5: Pit
   </li>
  </ul>
  <h3>
   <a name="DIMS">
   </a>
   DIMS
  </h3>
  <p>
   The “dimensions” keyword is a five-element array of long integers that defines the spatial subset (of a file or array) to use for processing. Nearly every time you specify the keyword FID, you must also specify the spatial subset of the corresponding file (even if the entire file, with no spatial subsetting, is to be processed).
  </p>
  <ul>
   <li value="1">
    DIMS[0]: A pointer to an open ROI; use only in cases where ROIs define the spatial subset. Otherwise, set to -1L.
   </li>
   <li value="2">
    DIMS[1]: The starting sample number. The first x pixel is 0.
   </li>
   <li value="3">
    DIMS[2]: The ending sample number
   </li>
   <li value="4">
    DIMS[3]: The starting line number. The first y pixel is 0.
   </li>
   <li value="5">
    DIMS[4]: The ending line number
   </li>
  </ul>
  <p>
   To process an entire file (with no spatial subsetting), define DIMS as shown in the following code example. This example assumes you have already opened a file using
   <a href="../ENVI_S/ENVI_SELECT.htm">
    ENVI_SELECT
   </a>
   or
   <a href="../ENVI_P/ENVI_PICKFILE.htm">
    ENVI_PICKFILE
   </a>
   :
  </p>
  <p class="Code_Indented">
   envi_file_query, fid, dims=dims
  </p>
  <p>
   You
   <i>
    cannot
   </i>
   define DIMS as a pointer to a region of interest (ROI) in any of
   <span class="DocumentTitleProductName">
    ENVI
   </span>
   ’s _DOIT library routines. Using the following example code with a _DOIT library routine will result in an error message when you run the program:
  </p>
  <p class="Code_Indented">
   roi_ids = ENVI_GET_ROI_IDS()
  </p>
  <p class="Code_Indented">
   <br />
   roi_dims = ENVI_GET_ROI_DIMS_PTR(roi_ids[0])
  </p>
  <p class="Code_Indented">
   <br />
   dims= [roi_dims,0,0,0,0]
  </p>
  <h3>
   <a name="FID">
   </a>
   FID
  </h3>
  <p>
   The file ID (FID) is a long-integer scalar with a value greater than 0. An invalid FID has a value of -1. The FID is provided as a named variable by any routine used to open or select a file. Often, the FID is returned from the keyword R_FID in the
   <a href="../../ENVIRasterToFID.htm">
    ENVIRasterToFID
   </a>
   routine. Files are processed by referring to their FIDs. If you work directly with the file in IDL, the FID is
   <i>
    not
   </i>
   equivalent to a logical unit number (LUN).
  </p>
  <h3>
   <a name="IN_MEMORY">
   </a>
   IN_MEMORY
  </h3>
  <p>
   Set this keyword to specify that output should be stored in memory. If you do not set IN_MEMORY, output will be stored on disk and you must specify OUT_NAME (see below).
  </p>
  <h3>
   <a name="KERNEL_SIZE">
   </a>
   KERNEL_SIZE
  </h3>
  <p>
   Use this keyword to specify a kernel size for the topographic features. KERNEL_SIZE is a single scalar that sets both the x and y kernel size. KERNEL_SIZE determines the local surface-fit size used to calculate topographic modeling parameters for feature extraction.
  </p>
  <h3>
   <a name="LOOKUP">
   </a>
   LOOKUP
  </h3>
  <p>
   Use this keyword to specify a byte array specifying the color tables for the classification image. The LOOKUP array contains an RGB triplet for each output class. The dimensions of the array are [3,
   <i>
    num_classes
   </i>
   +1], and the RGB triplet is ordered [
   <i>
    r
   </i>
   ,
   <i>
    g
   </i>
   ,
   <i>
    b
   </i>
   ]. The “Unclassified” class typically uses the RGB triplet [0, 0, 0] for black.
  </p>
  <h3>
   <a name="OUT_BNAME">
   </a>
   OUT_BNAME
  </h3>
  <p>
   Use this keyword to specify a string array of output band names.
  </p>
  <h3>
   <a name="OUT_NAME">
   </a>
   OUT_NAME
  </h3>
  <p>
   Use this keyword to specify a string with the output filename for the resulting data. If you set the keyword IN_MEMORY, you do not need to specify OUT_NAME.
  </p>
  <h3>
   <a name="POS">
   </a>
   POS
  </h3>
  <p>
   Use this keyword to specify an array of band positions, indicating the band numbers on which to perform the operation. This keyword indicates the spectral subset of bands to use in processing. POS is an array of long integers, ranging from 0 to the number of bands minus 1. Specify bands starting with zero (Band 1=0, Band 2=1, etc.) For example, to process only Bands 3 and 4 of a multi-band file, POS=[2, 3].
  </p>
  <p>
   POS is typically used with individual files. The example code below for
   <a href="../ENVI_S/ENVI_STATS_DOIT.htm">
    ENVI_STATS_DOIT
   </a>
   illustrates the use of POS for a single file with four bands of data:
  </p>
  <p class="Code_Indented">
   pos=[0,1,2,3]
  </p>
  <p class="Code_Indented">
   <br />
   envi_doit, 'envi_stats_doit', dims=dims, fid=fid, pos=pos, $
  </p>
  <p class="Code_Indented">
   <br />
   comp_flag=3, dmin=dmin, dmax=dmax, mean=mean, stdv=stdv, hist=hist
  </p>
  <p>
   But what if you need to create an output file consisting of data from different bands, each from different files? Library routines such as
   <a href="../C/CF_DOIT.htm">
    CF_DOIT
   </a>
   and
   <a href="../ENVI_L/ENVI_LAYER_STACKING_DOIT.htm">
    ENVI_LAYER_STACKING_DOIT
   </a>
   can accomplish this, but they use the POS keyword differently. Suppose you have four files,
   <code>
    test1
   </code>
   ,
   <code>
    test2
   </code>
   ,
   <code>
    test3
   </code>
   , and
   <code>
    test4
   </code>
   , with corresponding FIDs of
   <code>
    fid1
   </code>
   ,
   <code>
    fid2
   </code>
   ,
   <code>
    fid3
   </code>
   , and
   <code>
    fid4
   </code>
   , respectively. In the following example, you want Band 3 from
   <code>
    test1
   </code>
   in the first position, Band 2 from
   <code>
    test2
   </code>
   in the second position, Band 6 from
   <code>
    test3
   </code>
   in the third position, and Band 4 from
   <code>
    test4
   </code>
   in the fourth position. The code should be as follows:
  </p>
  <p class="Code_Indented">
   fid_array = [fid1,fid2,fid3,fid4]
  </p>
  <p class="Code_Indented">
   <br />
   pos=[2,1,5,3]
  </p>
  <p class="Code_Indented">
   <br />
   envi_doit, 'cf_doit', dims=dims, fid=fid_array
  </p>
  <p class="Code_Indented">
   <br />
   out_name='test_composite_file'
  </p>
  <h3>
   <a name="PIXEL_SIZE">
   </a>
   PIXEL_SIZE
  </h3>
  <p>
   Use this keyword to specify the pixel size of the image. PIXEL_SIZE is a two-element array of floating-point or double-precision values specifying the x and y pixel sizes, respectively.
  </p>
  <h3>
   <a name="R_FID">
   </a>
   R_FID
  </h3>
  <p>
   <span class="DocumentTitleProductNameENVIClassic">
    ENVI Classic
   </span>
   library routines that result in new images also have an R_FID, or “returned FID.” This is simply a named variable containing the file ID to access the processed data. Specifying this keyword saves you the step of opening the new file from disk.
  </p>
  <h3>
   <a name="SLOPE_TOL">
   </a>
   SLOPE_TOL
  </h3>
  <p>
   Use this keyword to specify the floating-point or double-precision value for the slope tolerance. SLOPE_TOL and CONVEX_TOL, in addition to the topographic modeling values, determine how a pixel is classified.
  </p>
  <div class="mp_footer">
   Copyright ©
   <span class="DocumentTitleCopyrightYear">
    2012
   </span>
   <![CDATA[ ]]>
   <span class="DocumentTitleCopyrightCompanyName">
    Exelis Visual Information Solutions, Inc.
   </span>
   All Rights Reserved.
  </div>
  <script type="text/javascript" src="../../../SkinSupport/MadCapBodyEnd.js">
  </script>
 </body>
</html>